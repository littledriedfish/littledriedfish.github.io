<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue3 Composition API 和 Vue Mixins (1)</title>
    <link href="/2024/01/11/vue3%20Composition%20API%20%E5%92%8C%20Vue%20Mixins(1)/"/>
    <url>/2024/01/11/vue3%20Composition%20API%20%E5%92%8C%20Vue%20Mixins(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>Vue组件之间共享代码<br>熟悉Vue 2，你可能已经使用了一个 mixin 来实现这个目的。但是新的Composition API，现在作为Vue 2的插件和Vue 3即将推出的一项功能，提供了一个更好的解决方案。</p><p>在这篇文章中，我们将看看Mixins的缺点，并看看Composition API是如何克服这些缺点，让Vue应用的可扩展性更强。</p><h2 id="Mixins简述"><a href="#Mixins简述" class="headerlink" title="Mixins简述"></a>Mixins简述</h2><p>让我们快速回顾一下mixins模式。</p><p>通常情况下，一个Vue组件是由一个JavaScript对象来定义的，这个JavaScript对象具有各种属性，代表着我们需要的功能，data, methods, computed等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">// MyComponent.js<br><span class="hljs-built_in">export</span> default &#123;<br>    data: () =&gt; (&#123;<br>        myDataProperty: null<br>    &#125;),<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">myMethod</span></span> () &#123; ... &#125;<br>    &#125;<br>    // ...<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们想在组件之间共享相同的属性时，我们可以将共同的属性提取到一个单独的模块中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// MyMixin.js<br><span class="hljs-built_in">export</span> default &#123;<br>  data: () =&gt; (&#123;<br>    mySharedDataProperty: null<br>  &#125;),<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">mySharedMethod</span></span> () &#123; ... &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们可以通过将其分配给mixin config属性并将其添加到任何使用的组件中。在运行时，Vue将把组件的属性与任何添加的mixin合并。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">// ConsumingComponent.js<br>import MyMixin from <span class="hljs-string">&quot;./MyMixin.js&quot;</span>;<br><br><span class="hljs-built_in">export</span> default &#123;<br>  mixins: [MyMixin],<br>  data: () =&gt; (&#123;<br>    myLocalDataProperty: null<br>  &#125;),<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">myLocalMethod</span></span> () &#123; ... &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个具体的例子中，运行时使用的组件定义是这样的。 可以看出mixin的组件属性(data、mthods..)都会分别进入了引入页面的相对位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> default &#123;<br>  data: () =&gt; (&#123;<br>    mySharedDataProperty: null<br>    myLocalDataProperty: null<br>  &#125;),<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">mySharedMethod</span></span> () &#123; ... &#125;,<br>    <span class="hljs-function"><span class="hljs-title">myLocalMethod</span></span> () &#123; ... &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mixins的缺点"><a href="#Mixins的缺点" class="headerlink" title="Mixins的缺点"></a>Mixins的缺点</h2><p>不清晰的数据来源：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。<br>命名空间冲突：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。<br>隐式的跨 mixin 交流：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。</p><h3 id="命名冲突"><a href="#命名冲突" class="headerlink" title="命名冲突"></a>命名冲突</h3><p>我们看到mixin模式是如何在运行时合并两个对象的。如果它们都共享一个同名的属性，会发生什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">const mixin = &#123;<br>  data: () =&gt; (&#123;<br>    myProp: null<br>  &#125;)<br>&#125;<br><br><span class="hljs-built_in">export</span> default &#123;<br>  mixins: [mixin],<br>  data: () =&gt; (&#123;<br>    // same name!<br>    myProp: null<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是合并策略发挥作用的地方。这是一组规则，用于决定当一个组件包含多个相同名称的选项时的情况。</p><p>Vue 组件的默认（但可选择配置）合并策略决定了本地选项将覆盖混合器选项。但也有例外。例如，如果我们有多个相同类型的生命周期钩子，那么这些钩子将被添加到钩子数组中，并且所有的钩子将被依次调用。</p><p>尽管我们不应该遇到任何实际的错误，但当我们在多个组件和混合体之间杂耍命名的属性时，写代码会变得越来越困难。尤其是当第三方的混合组件被添加为npm包时，这就更难了，因为它们的命名属性可能会引起冲突。</p><p>mixins 的缺点促进了 Composition API。来看看Composition API 如何运行。</p><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><p>组合式API的关键思想是，我们将组件的功能（如状态、方法、计算属性等）定义为对象属性，而不是将其定义为从新的设置函数中返回的JavaScript变量。</p><p>以这个经典的Vue 2组件为例，它定义了一个 “计数器 “功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">//Counter.vue<br><span class="hljs-built_in">export</span> default &#123;<br>  data: () =&gt; (&#123;<br>    count: 0<br>  &#125;),<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span></span>() &#123;<br>      this.count++;<br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    <span class="hljs-function"><span class="hljs-title">double</span></span> () &#123;<br>      <span class="hljs-built_in">return</span> this.count * 2;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是使用 Composition API 定义的完全相同的组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">// Counter.vue<br>import &#123; ref, computed &#125; from <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-built_in">export</span> default &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>    const count = ref(0);<br>    const double = computed(() =&gt; count * <span class="hljs-number">2</span>)<br>    function increment() &#123;<br>      count.value++;<br>    &#125;<br>    return &#123;<br>      count,<br>      double,<br>      increment<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先你会注意到我们导入了一个ref函数，这使得我们可以定义一个响应式变量，其功能与数据变量基本相同。计算函数也是一样的。</p><p>增量方法不是响应式的，所以它可以被声明为一个普通的JavaScript函数。注意，我们需要改变子属性值，才能改变count响应式变量的值。这是因为使用 ref 创建的响应式变量在传递过程中，需要将其作为对象来保留响应式变量。</p><p>一旦我们定义了这些功能，我们就从setup函数中返回这些功能。上面的两个组件在功能上没有什么区别。我们所做的就是使用替代API。</p><p class="note note-primary">Composition API将是Vue 3的核心功能，但你也可以在Vue 2中通过NPM插件@vue/composition-api使用它。</p><p>&#x2F;&#x2F;useCounter.js<br>import { ref, computed } from “vue”;</p><p>功能代码提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> default <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>  const count = ref(0);<br>  const double = computed(() =&gt; count * <span class="hljs-number">2</span>)<br>  function increment() &#123;<br>    count.value++;<br>  &#125;<br>  return &#123;<br>    count,<br>    double,<br>    increment<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>功能代码重用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// MyComponent.js<br>import useCounter from <span class="hljs-string">&quot;./useCounter.js&quot;</span>;<br><br><span class="hljs-built_in">export</span> default &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>    const &#123; count, double, increment &#125; = useCounter();<br>    <span class="hljs-built_in">return</span> &#123;<br>      count,<br>      double,<br>      increment<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Composition-API优点"><a href="#Composition-API优点" class="headerlink" title="Composition API优点"></a>Composition API优点</h2><p>响应式 API：例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。<br>生命周期钩子：例如 onMounted() 和 onUnmounted()，使我们可以在组件各个生命周期阶段添加逻辑。<br>依赖注入：例如 provide() 和 inject()，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>mixin模式表面上看起来很安全。然而，通过合并对象来共享代码，由于它给代码增加了脆弱性，并且掩盖了推理功能的能力，因此成为一种反模式。</p><p>Composition API 最聪明的地方在于，它允许 Vue 依靠原生 JavaScript 内置的保障措施来共享代码，比如将变量传递给函数，以及模块系统。</p><p>这是否意味着Composition API在各方面都比Vue的经典API优越？不是的，在大多数情况下，你可以坚持使用经典的API。但是，如果你打算重用代码，Composition API无疑是优越的。</p><p>本文参考: <a href="https://css-tricks.com/how-the-Vue-composition-api-replaces-vue-mixins/">https://css-tricks.com/how-the-Vue-composition-api-replaces-vue-mixins/</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
      <category>Composition API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>script基础-循环</title>
    <link href="/2020/01/01/script%E5%9F%BA%E7%A1%80-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2020/01/01/script%E5%9F%BA%E7%A1%80-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组循环"><a href="#JavaScript数组循环" class="headerlink" title="JavaScript数组循环"></a>JavaScript数组循环</h1><p>利用Javascript map(),reduce()和filter()数组方法可以帮助您编写更加声明性、流畅的风格代码。</p><p>而不是积累起来for循环和嵌套来处理列表和集合中的数据，您可以利用这些方法更好地将逻辑组织成功能的构建块，然后将它们链接起来以创建更可读和更易于理解的实现。</p><p>ES6还为我们提供了一些更好的数组方法，比如.find,.findIndex,.of和for..of循环！</p><h2 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">var officers = [<br>    &#123; <span class="hljs-built_in">id</span>: 20, name: <span class="hljs-string">&#x27;Captain Piett&#x27;</span> &#125;,<br>    &#123; <span class="hljs-built_in">id</span>: 24, name: <span class="hljs-string">&#x27;General Veers&#x27;</span> &#125;,<br>    &#123; <span class="hljs-built_in">id</span>: 56, name: <span class="hljs-string">&#x27;Admiral Ozzel&#x27;</span> &#125;,<br>    &#123; <span class="hljs-built_in">id</span>: 88, name: <span class="hljs-string">&#x27;Commander Jerjerrod&#x27;</span> &#125;<br>];<br>// What you need<br>// [20, 24, 56, 88]<br></code></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>使用率最高，也是最基本的一种遍历方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">var officersIds = [];<br><span class="hljs-keyword">for</span>(var i=0,len=officers.length;i&lt;len; i++)&#123;<br>    officersIds.push(officers[i].<span class="hljs-built_in">id</span>);<br>&#125;<br>console.log(officersIds); // [20,24,56,88]<br></code></pre></td></tr></table></figure><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><p>forEach中传入要执行的回调函数，函数有三个参数。第一个参数为数组元素(必选)，第二个参数为数组元素索引值(可选)，第三个参数为数组本身(可选)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">var officersIds = [];<br>officers.forEach(<span class="hljs-keyword">function</span> (officer,index,array) &#123;<br>    console.log(index); //0,1,2,3,<br>    console.log(officer); //&#123;<span class="hljs-built_in">id</span>: 20, name: <span class="hljs-string">&quot;Captain Piett&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 24, name: <span class="hljs-string">&quot;General Veers&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 56, name: <span class="hljs-string">&quot;Admiral Ozzel&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 88, name: <span class="hljs-string">&quot;Commander Jerjerrod&quot;</span>&#125;<br>    officersIds.push(officer.id);<br>&#125;);<br>console.log(officersIds); //[20,24,56,88]<br></code></pre></td></tr></table></figure><h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for in循环"></a>for in循环</h2><p>for…in循环可用于循环对象和数组,推荐用于循环对象,可以用来遍历JSON</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">var officersIds = [];<br><span class="hljs-keyword">for</span>(var key <span class="hljs-keyword">in</span> officers)&#123;<br>    console.log(key); // 0 1 2 3 返回数组索引<br>    console.log(officers[key]); //&#123;<span class="hljs-built_in">id</span>: 20, name: <span class="hljs-string">&quot;Captain Piett&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 24, name: <span class="hljs-string">&quot;General Veers&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 56, name: <span class="hljs-string">&quot;Admiral Ozzel&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 88, name: <span class="hljs-string">&quot;Commander Jerjerrod&quot;</span>&#125;<br>    officersIds.push(officers[key].<span class="hljs-built_in">id</span>);<br>&#125;<br>console.log(officersIds); //[20,24,56,88]<br></code></pre></td></tr></table></figure><h2 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h2><p>可循环数组和对象，推荐用于遍历数组。</p><p>for…of提供了三个新方法：</p><p>key()是对键名的遍历；<br>value()是对键值的遍历；<br>entries()是对键值对的遍历；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> arr = [<span class="hljs-string">&#x27;科大讯飞&#x27;</span>, <span class="hljs-string">&#x27;政法BG&#x27;</span>, <span class="hljs-string">&#x27;前端开发&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> item of arr) &#123;  <br>  console.log(item); //  科大讯飞  政法BG  前端开发<br>&#125;<br>// 输出数组索引<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> item of arr.keys()) &#123;  <br>  console.log(item);  // 0 1 2<br>&#125;<br>// 输出内容和索引<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> [item, val] of arr.entries()) &#123;  <br>  console.log(item + <span class="hljs-string">&#x27;:&#x27;</span> + val); //  0:科大讯飞  1：政法BG  2：前端开发<br>&#125;<br><br>var officersIds = [];<br><span class="hljs-keyword">for</span> (var item of officers) &#123;<br>    console.log(item); //&#123;<span class="hljs-built_in">id</span>: 20, name: <span class="hljs-string">&quot;Captain Piett&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 24, name: <span class="hljs-string">&quot;General Veers&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 56, name: <span class="hljs-string">&quot;Admiral Ozzel&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 88, name: <span class="hljs-string">&quot;Commander Jerjerrod&quot;</span>&#125;<br>    officersIds.push(item.id); <br>&#125;<br>console.log(officersIds); // [20,24,56,88]<br>// 输出数组索引<br><span class="hljs-keyword">for</span>(var item of officers.keys())&#123;<br>    console.log(item); // 0 1 2 3<br>&#125;<br>// 输出内容和索引<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> [item, val] of officers.entries()) &#123;<br>    console.log(item) // 0 1 2 3 输出数组索引<br>    console.log(val);//&#123;<span class="hljs-built_in">id</span>: 20, name: <span class="hljs-string">&quot;Captain Piett&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 24, name: <span class="hljs-string">&quot;General Veers&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 56, name: <span class="hljs-string">&quot;Admiral Ozzel&quot;</span>&#125;,&#123;<span class="hljs-built_in">id</span>: 88, name: <span class="hljs-string">&quot;Commander Jerjerrod&quot;</span>&#125;<br>    console.log(item + <span class="hljs-string">&#x27;:&#x27;</span> + val); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map循环"><a href="#map循环" class="headerlink" title="map循环"></a>map循环</h2><p>map() 会返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。<br>map() 方法按照原始数组元素顺序依次处理元素。</p><p>map 不修改调用它的原数组本身。</p><p>map()中传入要执行的回调函数，函数有三个参数。第一个参数为数组元素(必选)，第二个参数为数组元素索引值(可选)，第三个参数为数组本身(可选)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">var arr = [<br>    &#123;name:<span class="hljs-string">&#x27;a&#x27;</span>,age:<span class="hljs-string">&#x27;18&#x27;</span>&#125;,<br>    &#123;name:<span class="hljs-string">&#x27;b&#x27;</span>,age:<span class="hljs-string">&#x27;19&#x27;</span>&#125;,<br>    &#123;name:<span class="hljs-string">&#x27;c&#x27;</span>,age:<span class="hljs-string">&#x27;20&#x27;</span>&#125;<br>];<br>arr.map(<span class="hljs-keyword">function</span>(item,index) &#123;<br>    <span class="hljs-keyword">if</span>(item.name == <span class="hljs-string">&#x27;b&#x27;</span>) &#123;<br>        console.log(index)  // 1<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>数组加一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">var officersIds = officers.map(<span class="hljs-keyword">function</span> (officer) &#123;<br>    <span class="hljs-built_in">return</span> officer.id<br>&#125;);<br>console.log(officersIds); //[20,24,56,88]<br></code></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">array.reduce(<span class="hljs-keyword">function</span> callback(accumulator, currentValue, currentIndex, array)&#123;<br><br>&#125;[, initialValue])<br><br>var peoples = [<br>  &#123;<br>    <span class="hljs-built_in">id</span>: 10,<br>    name: <span class="hljs-string">&quot;Poe Dameron&quot;</span>,<br>    years: 14,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-built_in">id</span>: 2,<br>    name: <span class="hljs-string">&quot;Temmin &#x27;Snap&#x27; Wexley&quot;</span>,<br>    years: 30,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-built_in">id</span>: 41,<br>    name: <span class="hljs-string">&quot;Tallissan Lintra&quot;</span>,<br>    years: 16,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-built_in">id</span>: 99,<br>    name: <span class="hljs-string">&quot;Ello Asty&quot;</span>,<br>    years: 22,<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><h3 id="输出他们的年龄总数"><a href="#输出他们的年龄总数" class="headerlink" title="输出他们的年龄总数"></a>输出他们的年龄总数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">var totalYears = peoples.reduce(<span class="hljs-keyword">function</span> (total, people) &#123;<br>    console.log(total);<br>    console.log(people);<br>    <span class="hljs-built_in">return</span> total + people.years;<br>&#125;, 0);<br>// const totalYears = people.reduce((acc, people) =&gt; acc + people.years, <span class="hljs-number">0</span>);<br>console.log(totalYears); //<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="求年龄最大的那个人"><a href="#求年龄最大的那个人" class="headerlink" title="求年龄最大的那个人"></a>求年龄最大的那个人</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">var oldest = peoples.reduce(<span class="hljs-keyword">function</span> (oldest, people) &#123;<br>    <span class="hljs-built_in">return</span> (oldest.years || 0) &gt; people.years ? oldest : people;<br>&#125;, &#123;&#125;);<br>console.log(oldest); //&#123;<span class="hljs-built_in">id</span>: 2, name: <span class="hljs-string">&quot;Temmin &#x27;Snap&#x27; Wexley&quot;</span>, years: 30&#125;<br>console.log(oldest.years); //82<br></code></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">array.filter(<span class="hljs-keyword">function</span>(currentValue,index,arr)&#123;<br><br>&#125;, thisValue)<br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">var designer = peoples.filter(<span class="hljs-keyword">function</span> (people) &#123;<br>    <span class="hljs-built_in">return</span> people.job === <span class="hljs-string">&quot;designer&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">var totalScore = peoples<br>    .filter(<span class="hljs-keyword">function</span> (person) &#123;<br>        <span class="hljs-built_in">return</span> person.isForceUser;<br>    &#125;)<br>    .map(<span class="hljs-keyword">function</span> (choose) &#123;<br>        <span class="hljs-built_in">return</span> choose.mathScore + choose.englishScore;<br>    &#125;)<br>    .reduce(<span class="hljs-keyword">function</span> (total, score) &#123;<br>        <span class="hljs-built_in">return</span> total + score;<br>    &#125;, 0);<br></code></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">var divs = document.querySelectorAll(<span class="hljs-string">&#x27;div.pane&#x27;</span>);  <br>var text = Array.from(divs, (d) =&gt; d.textContent);  <br>console.log(<span class="hljs-string">&quot;div text:&quot;</span>, text);<br><br>// Old, ES5 way to get array from arguments<br><span class="hljs-function"><span class="hljs-title">function</span></span>() &#123;  <br>  var args = [].slice.call(arguments);<br>  //...<br>&#125;<br><br>// Using ES6 Array.from<br><span class="hljs-function"><span class="hljs-title">function</span></span>() &#123;  <br>  var args = Array.from(arguments);<br>  //..<br>&#125;<br><br>var filled = Array.from([1,,2,,3], (n) =&gt; n || 0);  <br>console.log(<span class="hljs-string">&quot;filled:&quot;</span>, filled);  <br>// =\&gt; [1,0,2,0,3]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>循环</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
